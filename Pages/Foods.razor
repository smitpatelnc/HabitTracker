@page "/food"
@using HabitTracker.Data
@using HabitTracker.Models
@using Microsoft.EntityFrameworkCore
@inject AppDbContext DbContext
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime

<div class="container">
    <h2 class="page-title">Food Management</h2>

    <div class="filter-container">
        <div class="search-container">
            <input type="text" class="search-input" placeholder="Search by name" @bind="searchTerm" />
            <button class="search-button" @onclick="Search">Search</button>
        </div>
        <button class="add-button" @onclick="AddNewFood">Add New Food</button>
    </div>

    <div class="filter-buttons">
        <button class="filter-button" @onclick="() => FilterByVegetarian(null)">All Foods</button>
        <button class="filter-button" @onclick="() => FilterByVegetarian(true)">Vegetarian</button>
        <button class="filter-button" @onclick="() => FilterByVegetarian(false)">Non-Vegetarian</button>
    </div>

    @if (foods == null)
    {
        <p>Loading...</p>
    }
    else if (filteredFoods.Count == 0)
    {
        <p>No food items found.</p>
    }
    else
    {
        <div class="table-container">
            <table class="food-table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Calories</th>
                        <th>Protein (%)</th>
                        <th>Carbohydrates (%)</th>
                        <th>Fat (%)</th>
                        <th>Vegetarian</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var food in filteredFoods)
                    {
                        <tr>
                            <td>@food.Name</td>
                            <td>@food.Calories</td>
                            <td>@CalculatePercentage(food.Protein, food.Calories)</td>
                            <td>@CalculatePercentage(food.Carbohydrates, food.Calories)</td>
                            <td>@CalculatePercentage(food.Fat, food.Calories)</td>
                            <td>@(food.IsVegetarian ? "Yes" : "No")</td>
                            <td>
                                    <button class="detail-button" @onclick="() => NavigateToDetail(food.Id)">Detail</button>
                                    <button class="delete-button" @onclick="() => DeleteFood(food)">Delete</button>
                                </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    List<Food> foods;
    List<Food> filteredFoods;
    string searchTerm;
    bool? filterVegetarian;

    protected override async Task OnInitializedAsync()
    {
        foods = await DbContext.Foods.ToListAsync();
        FilterFoods();
    }

    private void AddNewFood()
    {
        NavigationManager.NavigateTo("/add-food");
    }

    private async Task DeleteFood(Food food)
    {
        if (await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this food item?"))
        {
            DbContext.Foods.Remove(food);
            await DbContext.SaveChangesAsync();
            foods.Remove(food);
            FilterFoods();
        }
    }

    private void FilterFoods()
    {
        filteredFoods = foods.Where(f =>
            (filterVegetarian == null || f.IsVegetarian == filterVegetarian) &&
            (string.IsNullOrEmpty(searchTerm) || f.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
        ).ToList();
    }

    private void Search()
    {
        FilterFoods();
    }

    private void FilterByVegetarian(bool? isVegetarian)
    {
        filterVegetarian = isVegetarian;
        FilterFoods();
    }

    private double CalculatePercentage(double value, int totalCalories)
    {
        return Math.Round((value / totalCalories) * 100, 2);
    }

    private void NavigateToDetail(int foodId)
    {
        NavigationManager.NavigateTo($"food-detail/{foodId}");
    }
}

<style>
    
    .page-title {
        font-size: 24px;
        margin-bottom: 20px;
    }

    .filter-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .search-container {
        display: flex;
        align-items: center;
    }

    .search-input {
        padding: 8px;
        margin-right: 10px;
    }

    .search-button,
    .add-button,
    .filter-button {
        padding: 8px 20px;
        background-color: #007bff;
        color: #fff;
        border: none;
        cursor: pointer;
        margin-right: 10px;
    }

    .add-button {
        background-color: #28a745;
    }

    .filter-buttons {
        margin-bottom: 20px;
    }

    .table-container {
        overflow-x: auto;
    }

    .food-table {
        width: 100%;
        border-collapse: collapse;
    }

        .food-table th,
        .food-table td {
            padding: 10px;
            border: 1px solid #ddd;
        }

        .food-table th {
            background-color: #f2f2f2;
            text-align: left;
        }

    .detail-button,
    .delete-button {
        padding: 6px 12px;
        margin-right: 5px;
        border: none;
        cursor: pointer;
        border-radius: 4px;
        transition: background-color 0.3s;
    }

    .detail-button {
        background-color: #17a2b8;
        color: #fff;
    }

    .delete-button {
        background-color: #dc3545;
        color: #fff;
    }

        .detail-button:hover,
        .delete-button:hover {
            filter: brightness(85%);
        }

   

</style>
