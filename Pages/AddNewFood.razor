@page "/add-food"
@using HabitTracker.Models
@using HabitTracker.Data
@inject AppDbContext DbContext
@inject NavigationManager NavigationManager

<div class="header-container">
    <div class="header-content">
        <h2 class="page-title">Add New Food</h2>
    </div>
</div>


<div class="container">
    

    <form @onsubmit="AddFood">
        <div class="form-group">
            <label for="name">Name:</label>
            <input type="text" id="name" class="form-control" @bind="food.Name" required />
        </div>
        <div class="form-group">
            <label for="calories">Calories:</label>
            <input type="number" id="calories" class="form-control" @bind="food.Calories" required />
        </div>
        <div class="form-group">
            <label>Category:</label>
            <div class="form-check">
                <input type="radio" id="vegetarian" class="form-check-input" value="Vegetarian" name="category" checked="@((food.Category ?? "") == "Vegetarian")" @onchange="(e) => ChangeCategory(e)" />
                <label class="form-check-label" for="vegetarian">Vegetarian</label>
            </div>
            <div class="form-check">
                <input type="radio" id="nonvegetarian" class="form-check-input" value="Non-Vegetarian" name="category" checked="@((food.Category ?? "") == "Non-Vegetarian")" @onchange="(e) => ChangeCategory(e)" />
                <label class="form-check-label" for="nonvegetarian">Non-Vegetarian</label>
            </div>
        </div>

        <button type="submit" class="btn btn-primary">Add Food</button>
    </form>
</div>

@code {
    Food food = new Food();

    private async Task AddFood()
    {
        // Set IsVegetarian based on selected category
        food.IsVegetarian = food.Category == "Vegetarian";

        // Add the food item to the database
        DbContext.Foods.Add(food);
        await DbContext.SaveChangesAsync();

        // Calculate protein, fat, and carbohydrate values based on provided calories
        CalculateNutritionValues(food);

        // Redirect to the index page after adding the food item
        NavigationManager.NavigateTo("/food");
    }

    private void ChangeCategory(ChangeEventArgs e)
    {
        food.Category = e.Value.ToString();
    }

    private void CalculateNutritionValues(Food food)
    {
        double totalCalories = food.Calories;

        
        double averageProtein = 2.5; // grams
        double averageFat = 0.5; // grams
        double averageCarbohydrates = 10.0; // grams

        double totalGrams = totalCalories / 10.0; // Assuming 1g = 10 calories
        food.Protein = Math.Round(totalGrams * (averageProtein / 100), 2);
        food.Fat = Math.Round(totalGrams * (averageFat / 100), 2);
        food.Carbohydrates = Math.Round(totalGrams * (averageCarbohydrates / 100), 2);
    }
}



<style>
    .header-container {
        background-color: #aff3ff; 
        color: #333333; 
        padding: 15px;
        text-align: center;
    }

    .header-content {
        max-width: 500px;
        margin: 0 auto;
    }

    .page-title {
        font-size: 28px;
        margin-bottom: 20px;
    }
</style>
